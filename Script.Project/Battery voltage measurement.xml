<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Program
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:sim="urn:schemas-www-wisware.nl-xmlscripting-simulateuserinput"
  xmlns:stm="urn:schemas-www-wisware.nl-xmlscripting-statemanagement"
 >
  <pkg:ReportTargets>
    <pkg:Target Identifier="Default" Description="Report"/>
    <pkg:Target Identifier="Measurements" Description="Measurements"/>
    <pkg:Target Identifier="Visa" Description="Visa report"/>
  </pkg:ReportTargets>
  <pkg:Config>
    <![CDATA[
[Check]
; Set to 1 if these are all correct.
ValidParameters=0

[VISA]
;scope = dns, can be replace with ip-adress
ScopeRN=TCPIP0::scope::inst0::INSTR
PsuRN=TCPIP0::powersupply::inst0::INSTR

[Scope]
MemSize=1M4
;Normal|PeakDetect|Average|HighRes
AcquireWay=Normal
TDiv=20 ms
TriggerSelect=EDGE,SR,LINE,HT,OFF
TriggerPattern=

[Scope.MeasureTrace]
;CH1|CH2|CH3|CH4
Channel=CH1
BandwidthLimit=1
Attenuation=1
InitialVOffset=-1.3 V

[Sensitivity]
Count=4

[Sensitivity.1]
VDiv=500 mV

[Sensitivity.2]
VDiv=50 mV

[Sensitivity.3]
VDiv=5 mV

[Sensitivity.4]
VDiv=500 uV

[Psu.ChargingChannel]
Channel=CH1
Current=1 A
Voltage=2 V

[Charging]
BatteryFullVoltageDrop=3 mV
  ]]>
  </pkg:Config>
  <Imports>
    <Import Identifier="ElectronicUtils" Filename="..\Script.Common.Electronics\ElectronicUtils.xml"/>
    <Import Identifier="VISAInstrument" Filename="..\Script.Common.VISA\VISA Instrument.xml"/>
    <Import Identifier="SiglentSDS1104X" Filename="..\Script.Common.VISA\VISA Siglent SDS1104X.xml"/>
    <Import Identifier="SiglentSPD3303X" Filename="..\Script.Common.VISA\VISA Siglent SPD3303X.xml"/>
  </Imports>
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="VISAInstrument"/>
    <Use Identifier="SiglentSDS1104X"/>
    <Use Identifier="SiglentSPD3303X"/>
  </Uses>

  <Type>
    <Enumeration Identifier="TSensitivityChangeType" Elements="Initial, More, Less"/>

    <DataClass Identifier="TSensitivity">
      <Field Identifier="convVDiv" Type="ConvInt"/>
      <Field Identifier="Less" Type="TSensitivity"/>
      <Field Identifier="More" Type="TSensitivity"/>
    </DataClass>
  </Type>

  <Constants>
    <Constant Identifier="ScriptVersion" Type="string" Expression="'5.2.23'"/>
    <Constant Identifier="OverflowLow" Type="Integer" Expression="-100"/>
    <Constant Identifier="OverflowHigh" Type="Integer" Expression="100"/>
    <Constant Identifier="msSettlingTime" Type="Integer" Expression="50"/>
  </Constants>

  <Procedures>

    <Procedure Identifier="Execute">
      <Variables>
        <Variable Identifier="ScopeRN" Type="string" Init="'TCPIP0::scope::inst0::INSTR'"/>
        <Variable Identifier="PsuRN" Type="string" Init="'TCPIP0::powersupply::inst0::INSTR'"/>
        <Variable Identifier="Scope" Type="TSiglentSDS1104X"/>
        <Variable Identifier="ScopeTriggerSelect" Type="viString" Init="'EDGE,SR,LINE,HT,OFF'"/>
        <Variable Identifier="ScopeTriggerPattern" Type="viString" Init="''"/>
        <Variable Identifier="convScopeTDiv" Type="ConvInt"/>
        <Variable Identifier="convMeasureChannelAttenuation" Type="ConvInt"/>
        <Variable Identifier="convMeasureChannelInitialVOffset" Type="ConvInt"/>
        <Variable Identifier="ScopeAcquireWay" Type="TAcquireWay" Init="TAcquireWay.Normal"/>
        <Variable Identifier="ScopeMemSize" Type="TMemSize" Init="TMemSize.ms1M4"/>
        <Variable Identifier="ScopeMeasureChannel" Type="TChannelType" Init="TChannelType.CH1"/>
        <Variable Identifier="ScopeMeasureTrace" Type="TTraceType"/>
        <Variable Identifier="ScopeBandwidthLimit" Type="Boolean" Init="True"/>
        <Variable Identifier="PsuChargingChannel" Type="TSPD3303XChannel" Init="TSPD3303XChannel.CH1"/>
        <Variable Identifier="convChargingChannelCurrent" Type="ConvInt"/>
        <Variable Identifier="convChargingChannelVoltage" Type="ConvInt"/>
        <Variable Identifier="SensitivityHead" Type="TSensitivity" Init="ObjNil"/>
        <Variable Identifier="TriggerTimer" Type="THandle"/>
        <Variable Identifier="TriggerTimerDueTime" Type="Int64"/>
        <Variable Identifier="PreAquisitionSignalAcquiredSC" Type="UInt64"/>
        <Variable Identifier="PreAquisitionTriggerIsReadySC" Type="UInt64"/>
        <Variable Identifier="convBatteryFullVoltageDrop" Type="ConvInt"/>
      </Variables>

      <Procedures>
        <Procedure Identifier="ReadConfig">
          <Block>
            <Object.Use Identifier="Ini" Type="TIniHelper" Expression="TIniHelper.Create(ConfigInifile, True)">
              <Execute Statement="Ini.Section('Check', False)"/>
              <Variable Identifier="ValidParameters" Type="Boolean" Init="Ini.ReadBool('ValidParameters', False)"/>

              <Execute Statement="Ini.Section('VISA')"/>
              <Execute Statement="ScopeRN:= Ini.ReadString('ScopeRN', ScopeRN) "/>
              <Execute Statement="PsuRN:= Ini.ReadString('PsuRN', PsuRN) "/>

              <Object.Use Identifier="Ini" Type="TSiglentSDS1104XIniHelper" Expression="TSiglentSDS1104XIniHelper.Create(Ini.Inifile, Ini.EnableEcho)">
                <Execute Statement="Ini.Section('Scope')"/>
                <Execute Statement="convScopeTDiv:= Ini.ConvReadTDiv('TDiv', '10 ms') "/>
                <Execute Statement="ScopeMemSize:= Ini.ReadMemSize('MemSize', ScopeMemSize)"/>
                <Execute Statement="ScopeAcquireWay:= Ini.ReadAcquireWay('AcquireWay', ScopeAcquireWay)"/>
                <Execute Statement="ScopeTriggerSelect:= Ini.ReadString('TriggerSelect', ScopeTriggerSelect)"/>
                <Execute Statement="ScopeTriggerPattern:= Ini.ReadString('TriggerPattern', ScopeTriggerPattern)"/>
                
                <Execute Statement="Ini.Section('Scope.MeasureTrace')"/>
                <Execute Statement="ScopeMeasureChannel:= Ini.ReadChannelType('Channel', ScopeMeasureChannel) "/>
                <Execute Statement="ScopeBandwidthLimit:= Ini.ReadBoolean('BandwidthLimit', ScopeBandwidthLimit)"/>
                <Execute Statement="convMeasureChannelAttenuation:= Ini.ConvReadAttenuation('Attenuation', '1') "/>
                <Execute Statement="convMeasureChannelInitialVOffset:= Ini.ConvReadVOffset('InitialVOffset', '1.3 V') "/>

                <Execute Statement="Ini.Section('Sensitivity')"/>
                <Variable Identifier="SensitivityCount" Type="UInt32" Init="Ini.ReadInteger('Count', 1)"/>
                <Variable Identifier="SensitivityTail" Type="TSensitivity" Init="ObjNil"/>
                <ForLoop Indexer="I" From="1" To="SensitivityCount">
                  <Execute Statement="Ini.Section('Sensitivity.' + IntToStr(I))"/>
                  <lil:LinkedList.LinkUp Item="TSensitivity.Create(Ini.ConvReadVDiv('VDiv', '2 V'))" Head="SensitivityHead" Tail="SensitivityTail" TailLinkStatement="SensitivityTail.More:= Item"/>
                </ForLoop>
                <!-- Make sure they're sorted: higher values in front -->
                <lil:LinkedList.MergeSort Head="SensitivityHead" ItemType="TSensitivity" Next="Item.More" LinkUp="ItemA.More:= ItemB" IsInOrder="ItemA.convVDiv &gt;= ItemB.convVDiv"/>

                <!-- Link them both ways -->
                <Variable Identifier="PrevItem" Type="TSensitivity" Init="ObjNil"/>
                <lil:LinkedList.Iterate Head="SensitivityHead" ItemType="TSensitivity" RunningItem="Item" Next="Item.More">
                  <Execute Statement="Item.Less:= PrevItem"/>
                  <Execute Statement="PrevItem:= Item"/>
                </lil:LinkedList.Iterate>
              </Object.Use>

              <Object.Use Identifier="Ini" Type="TSiglentSPD3303XIniHelper" Expression="TSiglentSPD3303XIniHelper.Create(Ini.Inifile, Ini.EnableEcho)">
                <Execute Statement="Ini.Section('Psu.ChargingChannel')"/>
                <Execute Statement="PsuChargingChannel:= Ini.ReadSPD3303XChannel('Channel', PsuChargingChannel) "/>
                <Execute Statement="convChargingChannelCurrent:= Ini.ConvReadCurrent('Current', '1 A')"/>
                <Execute Statement="convChargingChannelVoltage:= Ini.ConvReadVoltage('Voltage', '2 V')"/>
              </Object.Use>
              <Execute Statement="Ini.Section('Charging')"/>
              <Execute Statement="convBatteryFullVoltageDrop:= Ini.ReadConvInt('BatteryFullVoltageDrop', ucVOffset, '5 mV')"/>

              <Raise Expression="Exception.Create('Please check the config and set validparameters=1')" Condition="not ValidParameters"/>
            </Object.Use>
          </Block>
        </Procedure>

        <Procedure Identifier="RunMeasurements">
          <Procedures>
            <Function Identifier="TakeScopeMeasurement" Type="ConvInt">
              <Parameters>
                <Parameter Identifier="Trace" Type="TTraceType"/>
                <Parameter Identifier="Overflow" Type="Boolean" Direction="Output"/>
              </Parameters>
              <Block>
                <Execute Statement="Result:= 0"/>
                <Variable Identifier="LastSignalAcquiredSC" Type="UInt64"/>
                <Variable Identifier="LastTriggerIsReadySC" Type="UInt64"/>
                <sts:Status.Block Text="'Waiting for trigger'" LeaveText="'Done waiting for trigger'">
                  <Suspend>
                    <Resume.BreakRequest IssueExit="True"/>
                    <Resume.EventHandle Handle="TriggerTimer"/>
                  </Suspend>
                  <RepeatUntilLoop Expression="LastSignalAcquiredSC &gt; PreAquisitionSignalAcquiredSC">
                    <Suspend>
                      <Resume.BreakRequest IssueExit="True"/>
                      <Resume.Timed Duration="10000"/>
                    </Suspend>
                    <Execute Statement="Scope.CheckStatus(LastSignalAcquiredSC, LastTriggerIsReadySC)"/>
                    <sts:Status Text="Format('Status: %u/%u, %u/%u', LastSignalAcquiredSC,PreAquisitionSignalAcquiredSC, LastTriggerIsReadySC, PreAquisitionTriggerIsReadySC)"/>
                  </RepeatUntilLoop>
                  <Execute Statement="Scope.Stop"/>
                </sts:Status.Block>
                <Execute Statement="PreAquisitionSignalAcquiredSC:= LastSignalAcquiredSC"/>
                <Execute Statement="PreAquisitionTriggerIsReadySC:= LastTriggerIsReadySC"/>
                <Variable Identifier="TraceIDStr" Type="string" Init="Scope.TraceID[Trace]"/>
                <Variable Identifier="Count" Type="Integer"/>
                <Variable Identifier="CountDiv4" Type="Integer"/>
                <Variable Identifier="MidCount" Type="Integer"/>
                <Variable Identifier="Min" Type="Integer"/>
                <Variable Identifier="Max" Type="Integer"/>
                <Variable Identifier="Sum" Type="Int64"/>
                <sts:Status.Block Text="Format('Capturing %s', TraceIDStr)" LeaveText="Format('Done capturing %s', TraceIDStr)">
                  <Object.Use Identifier="AcquisitionInfo" Type="TSingleSummedSampleAcquisitionInfo" Expression="Scope.GetSingleSummedSample(Trace, ObjNil)">
                    <Execute Statement="Scope.TriggerMode:= TTriggerMode.Single"/>
                    <Execute Statement="SetWaitableTimer(TriggerTimer, TriggerTimerDueTime, 0, True)"/>
                    <Execute Statement="Count:= AcquisitionInfo.Sample.Count"/>
                    <!--dispose 50% of extremes-->
                    <Execute Statement="CountDiv4:= (Count + 1) div 4"/>
                    <Execute Statement="MidCount:= Count - CountDiv4 * 2"/>
                    <sts:Status.Block Text="'Taking average'" LeaveText="'Done taking average'">
                      <Execute Statement="Sum:= AcquisitionInfo.Sample.GetSum(CountDiv4, MidCount, Min, Max)"/>
                    </sts:Status.Block>
                    <ExitOnAbortRequest/>
                    <rep:Reporter.Information Text="Format('MidCount: %d', MidCount)" Condition="IsVerbose"/>
                    <rep:Reporter.Information Text="Format('Min: %d', Min)" Condition="IsVerbose"/>
                    <rep:Reporter.Information Text="Format('Max: %d', Max)" Condition="IsVerbose"/>
                    <rep:Reporter.Information Text="Format('Sum: %d', Sum)" Condition="IsVerbose"/>
                    <rep:Reporter.Information Text="Format('VFactor: %g', AcquisitionInfo.VFactor)" Condition="IsVerbose"/>
                    <Variable Identifier="ResultExt" Type="Extended" Init="AcquisitionInfo.VOffset +  Sum * AcquisitionInfo.VFactor / MidCount"/>
                    <Raise Expression="Exception.Create('Rounding error check')" Condition="not ucVOffset.ExtendedToIntValue(ResultExt, Result)"/>
                    <Execute Statement="Overflow:= (Min &lt; OverflowLow) or (Max &gt; OverflowHigh)"/>
                    <rep:Reporter.Information Text="Format('MeasurementExt: %g', ResultExt)" Condition="IsVerbose"/>
                    <rep:Reporter.Information Text="Format('Measurement: %s', ucVOffset.IntValueToStr(Result, TUnitPostFix.Separated, DecimalSeparator))" Condition="IsVerbose"/>
                  </Object.Use>
                </sts:Status.Block>
              </Block>
            </Function>

            <Function Identifier="ChangeMeasurementSensitivity" Type="Boolean">
              <Parameters>
                <Parameter Identifier="Sensitivity" Type="TSensitivity" Direction="Output"/>
                <Parameter Identifier="ChangeType" Type="TSensitivityChangeType"/>
              </Parameters>
              <Block>
                <Execute Statement="Result:= False"/>
                <Case Expression="ChangeType">
                  <On Select="TSensitivityChangeType.Initial">
                    <Execute Statement="Scope.ConvVDiv[ScopeMeasureTrace]:= Sensitivity.convVDiv"/>
                    <Execute Statement="Result:= not Assigned(Sensitivity.More)"/>
                    <Choose>
                      <When Expression="Result">
                        <rep:Reporter.Information Text="Format('[%d] Initialized to final sensitivity %s', GetTickCount64, ucVDiv.IntValueToStr(Sensitivity.convVDiv, TUnitPostFix.Separated, DecimalSeparator))"/>
                      </When>
                      <Otherwise>
                        <rep:Reporter.Information Text="Format('[%d] Initialized to sensitivity %s', GetTickCount64, ucVDiv.IntValueToStr(Sensitivity.convVDiv, TUnitPostFix.Separated, DecimalSeparator))"/>
                      </Otherwise>
                    </Choose>
                  </On>
                  <On Select="TSensitivityChangeType.More">
                    <Execute Statement="Result:= not Assigned(Sensitivity.More)"/>
                    <Block Condition="not Result">
                      <Execute Statement="Sensitivity:= Sensitivity.More"/>
                      <Execute Statement="Scope.ConvVDiv[ScopeMeasureTrace]:= Sensitivity.convVDiv"/>
                      <Execute Statement="Result:= not Assigned(Sensitivity.More)"/>
                      <Choose>
                        <When Expression="Result">
                          <rep:Reporter.Information Text="Format('[%d] Changed to final sensitivity %s', GetTickCount64, ucVDiv.IntValueToStr(Sensitivity.convVDiv, TUnitPostFix.Separated, DecimalSeparator))"/>
                        </When>
                        <Otherwise>
                          <rep:Reporter.Information Text="Format('[%d] Changed to a higher sensitivity %s', GetTickCount64, ucVDiv.IntValueToStr(Sensitivity.convVDiv, TUnitPostFix.Separated, DecimalSeparator))"/>
                        </Otherwise>
                      </Choose>
                    </Block>
                  </On>
                  <On Select="TSensitivityChangeType.Less">
                    <Block Condition="Assigned(Sensitivity.Less)">
                      <Execute Statement="Sensitivity:= Sensitivity.Less"/>
                      <Execute Statement="Scope.ConvVDiv[ScopeMeasureTrace]:= Sensitivity.convVDiv"/>
                      <rep:Reporter.Error Text="Format('[%d] Changed to a lower sensitivity %s', GetTickCount64, ucVDiv.IntValueToStr(Sensitivity.convVDiv, TUnitPostFix.Separated, DecimalSeparator))"/>
                    </Block>
                  </On>
                </Case>
              </Block>
            </Function>
          </Procedures>
          <Block>
            <Object.Use Identifier="VisaRM" Type="TVisaResourceManager" Expression="TVisaResourceManager.Create">
              <sts:Status Text="'Connecting to scope'"/>
              <Object.Use Identifier="ScopeSession" Type="TVisaResource" Expression="VisaRM.OpenResource(ScopeRN, TAccessMode.Exclusive_Lock, 10000)">
                <Object.Use Identifier="Scope" Type="TSiglentSDS1104X" Expression="TSiglentSDS1104X.Create(ScopeSession)" LocalVariable="false">
                  <sts:Status Text="'Connecting to powersupply'"/>
                  <Object.Use Identifier="PsuSession" Type="TVisaResource" Expression="VisaRM.OpenResource(PsuRN, TAccessMode.NO_LOCK, 10000)">
                    <Object.Use Identifier="Psu" Type="TSiglentSPD3303X" Expression="TSiglentSPD3303X.Create(PsuSession)">
                      <Execute Statement="Psu.Enabled[PsuChargingChannel]:= False"/>
                      <TryFinally>
                        <Try>
                          <Execute Statement="TriggerTimer:= CreateWaitableTimer(True)"/>
                          <sts:Status.Block Text="'Setting scope and powersupply up'" LeaveText="'Done setting scope and powersupply up'">
                            <Execute Statement="ScopeMeasureTrace:= Scope.ChannelTrace(ScopeMeasureChannel)"/>
                            <Execute Statement="Psu.ConvVoltage[PsuChargingChannel]:= convChargingChannelVoltage"/>
                            <Execute Statement="Psu.Enabled[PsuChargingChannel]:= True"/>
                            <rep:Reporter.Information Text="'Measuring voltage'" Markup="Header2"/>
                            <rep:Reporter.Information Text="'Using scope: ' + Scope.IDN"/>
                            <rep:Reporter.Information Text="'Using psu: ' + Psu.IDN"/>
                            <rep:Reporter.Information Text="''"/>
                            <Execute Statement="Scope.CommHeader:= THeaderType.Off"/>
                            <Execute Statement="Scope.Timeout:= 10000"/>
                            <Execute Statement="Scope.TriggerMode:= TTriggerMode.Stop"/>
                            <Execute Statement="Scope.CheckStatus(PreAquisitionSignalAcquiredSC, PreAquisitionTriggerIsReadySC)"/>
                            <Execute Statement="Scope.TriggerMode:= TTriggerMode.Single"/>
                            <Execute Statement="Scope.AcquireWay:= ScopeAcquireWay"/>
                            <Execute Statement="Scope.MemorySize:= ScopeMemSize"/>
                            <Execute Statement="Scope.ConvTDiv:= convScopeTDiv"/>
                            <Execute Statement="Scope.Enabled[TChannelType.CH1]:= ScopeMeasureChannel = TChannelType.CH1"/>
                            <Execute Statement="Scope.Enabled[TChannelType.CH2]:= ScopeMeasureChannel = TChannelType.CH2"/>
                            <Execute Statement="Scope.Enabled[TChannelType.CH3]:= ScopeMeasureChannel = TChannelType.CH3"/>
                            <Execute Statement="Scope.Enabled[TChannelType.CH4]:= ScopeMeasureChannel = TChannelType.CH4"/>
                            <Execute Statement="Scope.ConvAttenuation[ScopeMeasureChannel]:= convMeasureChannelAttenuation"/>
                            <Execute Statement="Scope.BandwidthLimit[ScopeMeasureChannel]:= ScopeBandwidthLimit"/>
                            <Execute Statement="Scope.ConvVOffset[ScopeMeasureChannel]:= convMeasureChannelInitialVOffset"/>
                            <Execute Statement="Scope.TriggerSelect:= ScopeTriggerSelect" Condition="IsNonEmptyString(ScopeTriggerSelect)"/>
                            <Execute Statement="Scope.TriggerPattern:= ScopeTriggerPattern" Condition="IsNonEmptyString(ScopeTriggerPattern)"/>
                            <Execute Statement="Scope.ConvTriggerDelay:= 0"/>
                            <!--100 nano -->
                            <Variable Identifier="secWaitTime" Type="Extended" Init="cHDivisions * Scope.TDiv"/>
                            <rep:Reporter.Information Text="Format('Minimal time before trigger stop: %.3f ms', secWaitTime * 1000)"/>
                            <Execute Statement="TriggerTimerDueTime:= -Round(10000000 * secWaitTime)"/>
                          </sts:Status.Block>

                          <Variable Identifier="voltMeasuredVoltage" Type="ConvInt"/>
                          <Variable Identifier="Overflow" Type="Boolean"/>
                          <Variable Identifier="StartTicks" Type="UInt64" Init="GetTickCount64"/>
                          <Variable Identifier="MaxVoltage" Type="ConvInt" Init="0"/>
                          <Variable Identifier="CurrentSensitivity" Type="TSensitivity" Init="SensitivityHead"/>
                          <!--<Pause ExitCondition="AbortRequest"/>-->
                          <sts:Status.Block Text="'Starting to measure'">
                            <Execute Statement="SetWaitableTimer(TriggerTimer, TriggerTimerDueTime, 0, True)"/>
                            <rep:Reporter.Information Text="'Tick'#9'Time'#9'Scope voltage'#9'Psu voltage'" Target="Measurements"/>
                            <stm:StateHandler InitialState="Seek">
                              <stm:SetState Name="TargetSensitivity" Condition="ChangeMeasurementSensitivity(CurrentSensitivity, TSensitivityChangeType.Initial)"/>
                              <sim:Wait Time="msSettlingTime"/>
                              <RepeatUntilLoop Expression="AbortRequest">
                                <Execute Statement="voltMeasuredVoltage:= TakeScopeMeasurement(ScopeMeasureTrace, Overflow)"/>
                                <ExitOnAbortRequest/>
                                <Variable Identifier="convPsuActualPsuVoltage" Type="ConvInt" Init="Psu.ConvActualVoltage[PsuChargingChannel]"/>
                                <Variable Identifier="convPsuActualCurrent" Type="ConvInt" Init="Psu.ConvActualCurrent[PsuChargingChannel]"/>
                                <stm:HandleStates>
                                  <stm:State Name="Seek">
                                    <Choose>
                                      <When Expression="Overflow">
                                        <stm:SetState Name="TargetSensitivity" Condition="ChangeMeasurementSensitivity(CurrentSensitivity, TSensitivityChangeType.Less)"/>
                                      </When>
                                      <Otherwise>
                                        <stm:SetState Name="TargetSensitivity" Condition="ChangeMeasurementSensitivity(CurrentSensitivity, TSensitivityChangeType.More)"/>
                                        <Execute Statement="Scope.ConvVOffset[ScopeMeasureTrace]:= -voltMeasuredVoltage"/>
                                      </Otherwise>
                                    </Choose>
                                    <Execute Statement="Scope.ConvVDiv[ScopeMeasureTrace]:= CurrentSensitivity.convVDiv"/>
                                  </stm:State>
                                  <stm:State Name="TargetSensitivity">
                                    <Choose>
                                      <When Expression="Overflow">
                                        <stm:SetState Name="Seek" Condition="not ChangeMeasurementSensitivity(CurrentSensitivity, TSensitivityChangeType.Less)"/>
                                      </When>
                                      <Otherwise>
                                        <Variable Identifier="CurrentTicks" Type="UInt64" Init="GetTickCount64"/>
                                        <rep:Reporter.Information Text="Format('%d'#9'%.2f'#9'%s'#9'%s', CurrentTicks, (CurrentTicks - StartTicks)/ 1000, ucVOffset.IntValueToEngineeringStr(voltMeasuredVoltage, TUnitPostFix.None, DecimalSeparator), ucActualVoltage.IntValueToEngineeringStr(convPsuActualPsuVoltage, TUnitPostFix.None, DecimalSeparator))" Target="Measurements"/>
                                        <Execute Statement="Scope.ConvVOffset[ScopeMeasureTrace]:= -voltMeasuredVoltage"/>
                                        <Execute Statement="MaxVoltage:= voltMeasuredVoltage" Condition="voltMeasuredVoltage &gt; MaxVoltage"/>
                                        <Variable Identifier="convVoltageDrop" Type="ConvInt" Init="MaxVoltage - voltMeasuredVoltage"/>
                                        <sts:Status Text="Format('Charge: %s and %s (%s drop)', ucVOffset.IntValueToStr(voltMeasuredVoltage, TUnitPostFix.Separated, DecimalSeparator, 5), ucActualCurrent.IntValueToStr(convPsuActualCurrent, TUnitPostFix.Separated, DecimalSeparator, 3), ucVOffset.IntValueToStr(convVoltageDrop, TUnitPostFix.Separated, DecimalSeparator, 3))" Depth="1"/>
                                        <Block Condition="convVoltageDrop &gt; convBatteryFullVoltageDrop">
                                          <rep:Reporter.Information Text="'Battery is full!!'"/>
                                          <Exit/>
                                        </Block>
                                      </Otherwise>
                                    </Choose>
                                  </stm:State>
                                </stm:HandleStates>
                                <sim:Wait Time="msSettlingTime"/>
                              </RepeatUntilLoop>
                            </stm:StateHandler>
                          </sts:Status.Block>
                        </Try>
                        <Finally>
                          <Execute Statement="CloseHandle(TriggerTimer)" Condition="not IsEmpty(TriggerTimer)"/>
                          <Execute Statement="Psu.Enabled[PsuChargingChannel]:= False"/>
                          <sim:Wait Time="300"/>
                          <!-- Just to be safe, the PSU has some time related quirks -->
                          <Execute Statement="Psu.Enabled[PsuChargingChannel]:= False"/>
                        </Finally>
                      </TryFinally>
                    </Object.Use>
                  </Object.Use>
                </Object.Use>
              </Object.Use>
            </Object.Use>
          </Block>
        </Procedure>

      </Procedures>

      <Block>
        <rep:Reporter.Information Text="'Capture traces'" Markup="Header1"/>
        <rep:Reporter.Information Text="Format('Time: %s', FormatDateTime('', Now))"/>
        <rep:Reporter.Information Text="Format('Interpreter version: %s', GetVersionInfo('%d.%d.%d'))"/>
        <rep:Reporter.Information Text="Format('Script version: %s', ScriptVersion)"/>
        <rep:Reporter.Information Text="Format('Filename: %s', ScriptFilename)"/>
        <rep:Reporter.Information Text="Format('Reporting base directory: %s', ReportingBase)" Condition="not IsEmpty(ReportingBase)"/>
        <rep:Reporter.Information Text="''"/>
        <TryFinally>
          <Try>
            <Block Condition="InputStrings.Count &gt; 0">
              <rep:Reporter.Information Text="'Comments'" Markup="Header2"/>
              <ForLoop Indexer="I" From="0" To="InputStrings.Count - 1">
                <rep:Reporter.Information Text="InputStrings[I]"/>
              </ForLoop>
              <rep:Reporter.Information Text="''"/>
            </Block>
            <rep:Reporter.Information Text="'Config report'" Markup="Header2"/>
            <Execute Statement="ReadConfig"/>
            <rep:Reporter.Information Text="''"/>
            <Execute Statement="RunMeasurements"/>
          </Try>
          <Finally>
            <rep:Reporter.Information Text="''"/>
            <rep:Reporter.Information Text="'Done'" Markup="Header2"/>
            <rep:Reporter.Information Text="Format('Time: %s', FormatDateTime('', Now))"/>
          </Finally>
        </TryFinally>
      </Block>
    </Procedure>
  </Procedures>

  <Block>
    <TryExcept>
      <Try>
        <sts:Status.Block Text="'Executing script'" LeaveText="'Done executing script'">
          <Execute Statement="DoReportVisa:= IsDebugging"/>
          <Execute Statement="Execute"/>
        </sts:Status.Block>
        <sts:Status Text="'Aborted script - reports are not saved automatically'" Condition="AbortRequest"/>
      </Try>
      <Except>
        <On Identifier="E" ClassType="Exception">
          <rep:Reporter.Error Text="Format('An exception of type %s was raised: %s', E.ClassName, E.Message)"/>
          <sts:Status Text="'Failed executing script: ' + E.Message"/>
          <Raise/>
        </On>
        <Otherwise>
          <Raise/>
        </Otherwise>
      </Except>
    </TryExcept>
  </Block>
</pkg:Program>